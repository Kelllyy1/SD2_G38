
//produces fragmented JSON despite fully formed JSON arriving.

#include <ArduinoJson.h>
#include <Wire.h>
#include "SC16IS752.h"
#include "freertos/FreeRTOS.h"
#include "freertos/semphr.h"

#define NODE_ID 1
#define ACK_TIMEOUT 500
#define LISTEN_TIMEOUT 500
#define WAITFORDATA_TIMEOUT 500



SemaphoreHandle_t serial2Semaphore;

// Task handles for managing FreeRTOS tasks
TaskHandle_t Task1Handle = NULL;
TaskHandle_t Task2Handle = NULL;

bool ListenForPing(HardwareSerial *serialPort);
String WaitForData(HardwareSerial &serial);
String ReadFromSerial(HardwareSerial &serialPort);
bool WaitForAck(HardwareSerial *serialPort);
String CreateJson();
String ReadFromSimulator();
int RouteData(String json);
int GetJsonValue(String jsonStr, String key);
void SendToNode4Task(void *pvParameters);
void ListenForSimulatorTask(void *pvParameters);

int Send_to_Node_4 = 0;
String Node_4_Data;

void setup() {

    Serial.begin(115200);
    Serial1.begin(115200, SERIAL_8N1, 16, 17); // UART for Node 2

    serial2Semaphore = xSemaphoreCreateBinary();
    xSemaphoreGive(serial2Semaphore);

    // Create FreeRTOS tasks
    xTaskCreatePinnedToCore(ListenForSimulatorTask, "ListenForSimulatorTask", 4096, NULL, 1, &Task1Handle, 0); // Run on Core 0

}

void loop() {
//
}

void ListenForSimulatorTask(void *pvParameters) {
    while (true) {
        String json = ReadFromSimulator();
        if (json.length() > 0) {
            if (xSemaphoreTake(serial2Semaphore, portMAX_DELAY) == pdTRUE) {
                Serial.println(json);
                xSemaphoreGive(serial2Semaphore);
            }
        }
        vTaskDelay(100 / portTICK_PERIOD_MS);
    }
}

String ReadFromSimulator() {
    String jsonData = "";
    if (Serial.available() > 0) {
        jsonData = Serial.readStringUntil('\n');
        jsonData.trim();
        Serial1.println(jsonData); // Send message via UART1
    }
    return jsonData;
}
