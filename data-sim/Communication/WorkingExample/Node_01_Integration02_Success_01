#include <ArduinoJson.h>
#include <Wire.h>
#include "SC16IS752.h"
#include "freertos/FreeRTOS.h"
#include "freertos/semphr.h"

#define NODE_ID 1
#define ACK_TIMEOUT 500
#define LISTEN_TIMEOUT 500
#define WAITFORDATA_TIMEOUT 500

SemaphoreHandle_t serial2Semaphore;

// Task handles for managing FreeRTOS tasks
TaskHandle_t Task1Handle = NULL;
TaskHandle_t Task2Handle = NULL;

bool ListenForPing(HardwareSerial *serialPort);
String WaitForData(HardwareSerial &serial);
String ReadFromSerial(HardwareSerial &serialPort);
bool WaitForAck(HardwareSerial *serialPort);
String CreateJson();
String ReadFromSimulator();
int RouteData(String json);
int GetJsonValue(String jsonStr, String key);
void SendToNode4Task(void *pvParameters);
void ListenForSimulatorTask(void *pvParameters);

int Send_to_Node_4 = 0;
String Node_4_Data;

void setup() {
    Serial.begin(115200);
    Serial1.begin(115200, SERIAL_8N1, 16, 17); // UART for Node 2

    serial2Semaphore = xSemaphoreCreateBinary();
    xSemaphoreGive(serial2Semaphore);

    // Create FreeRTOS tasks
    xTaskCreatePinnedToCore(ListenForSimulatorTask, "ListenForSimulatorTask", 4096, NULL, 1, &Task1Handle, 0); // Run on Core 0
}

void loop() {
    // Loop remains empty; all work is done in FreeRTOS tasks
}

void ListenForSimulatorTask(void *pvParameters) {
    while (true) {
        String json = ReadFromSimulator(); // Read incoming data
        if (json.length() > 0) { // If we received a complete message
            if (xSemaphoreTake(serial2Semaphore, portMAX_DELAY) == pdTRUE) {
                Serial.println(json);  // Print the received message
                Serial1.println(json); // Forward it to UART1
                xSemaphoreGive(serial2Semaphore);
            }
        }
        vTaskDelay(20 / portTICK_PERIOD_MS); // Short delay to allow other tasks to run
    }
}

// Function to handle reading serial data in chunks and reassemble it
String ReadFromSimulator() {
    static String buffer = "";  // Static buffer to hold partial data between function calls
    String jsonData = "";

    // Keep reading the buffer until it's empty
    while (Serial.available() > 0) {
        char incomingChar = (char)Serial.read();  // Read one byte at a time
        buffer += incomingChar;  // Append it to the buffer

        // Check if we've received a complete line (i.e., contains a newline character)
        if (incomingChar == '\n') {
            jsonData = buffer;  // Set jsonData to the full message
            buffer = "";  // Reset the buffer for the next message
        }
    }

    // Return the complete message (if any) or an empty string
    return jsonData;
}
