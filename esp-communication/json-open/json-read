#include <ArduinoJson.h>

#include "esp_log.h"

#define ESP_LOG_NONE

void setup() {
  Serial.begin(115200);  
  while (!Serial) { ; }  
  pinMode(2, OUTPUT); 
  esp_log_level_set("*", ESP_LOG_WARN);
  }


void loop() {
  if (Serial.available() > 0) {
    digitalWrite(2, HIGH); 
    // Read the incoming JSON data
    String json = Serial.readString();  
    Serial.println("Received JSON:");
    // Print the received JSON data for debugging
  
    Serial.println(json);   
    //Calling the JSON
    StaticJsonDocument<200> doc;  
    DeserializationError error = deserializeJson(doc, json);  // Parse the JSON
    
    if (error) {
      Serial.print("Error: ");
      Serial.println(error.f_str());  // Print error if JSON is invalid
    } else {
      // JSON is valid, access data like this:
      //For a JSON to be valid, it has to be complete
      const char* battery_id = doc["battery_id"];
      const char* timestamp = doc["timestamp"];
      JsonArray cells = doc["cells"];
      
      // Debugging outputs to confirm what is being received
      if (!battery_id) {
        Serial.println("Battery ID not found.");
      } else {
        Serial.print("Battery ID: ");
        Serial.println(battery_id);
      }
      
      if (!timestamp) {
        Serial.println("Timestamp not found.");
      } else {
        Serial.print("Timestamp: ");
        Serial.println(timestamp);
      }
      
      // This is the main part where we are unpacking
      //This for is called a "for-each"
      for (JsonObject cell : cells) {
        int id = cell["id"];
        float voltage = cell["voltage"];
        float temperature = cell["temperature"];
        // Print or process the cell data
        Serial.print("Cell ID: "); Serial.println(id);
        Serial.print("Voltage: "); Serial.println(voltage);
        Serial.print("Temperature: "); Serial.println(temperature);
      }
    }
  }
  digitalWrite(2, LOW);
}
