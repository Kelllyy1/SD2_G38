#include <ArduinoJson.h>
#include <Wire.h>
#include "SC16IS752.h"
#include "freertos/FreeRTOS.h"
#include "freertos/semphr.h"


#define ACK_TIMEOUT 500  // Timeout for acknowledgment (ms)
#define CH_A SC16IS752_CHANNEL_A
#define CH_B SC16IS752_CHANNEL_B

SemaphoreHandle_t CH_A_Semaphore;
SemaphoreHandle_t CH_B_Semaphore;

// Task handles for managing FreeRTOS tasks
TaskHandle_t Task1Handle = NULL;
TaskHandle_t Task2Handle = NULL;


void encodeString(const char *input, uint8_t *output, uint8_t length);
void WriteFromExtender(uint8_t channel, const char *input);
String ReadFromExtender(uint8_t channel);
bool waitForAckExtender(uint8_t channel);
String CreateJson();



String receivedJsonSerial = "";
int lastNodeListened = 0;
bool ack;
String jsonData;
String DataSend;
bool processing = false;



SC16IS752 i2cuart = SC16IS752(SC16IS750_PROTOCOL_I2C,SC16IS750_ADDRESS_BB); 

void setup() {
    Serial.begin(115200);
    i2cuart.begin(SC16IS752_DEFAULT_SPEED, SC16IS752_DEFAULT_SPEED); //baudrate setting
    if (i2cuart.ping()!=1) {
        Serial.println("Device not found");
        while(1);
    } else {
        Serial.println("Device found");
    }
    
    CH_A_Semaphore = xSemaphoreCreateBinary();
    CH_B_Semaphore = xSemaphoreCreateBinary();
    xSemaphoreGive(CH_A_Semaphore);
    xSemaphoreGive(CH_B_Semaphore);

    // Create FreeRTOS tasks
    xTaskCreatePinnedToCore(listenForNodesTask, "ListenNodes", 4096, NULL, 1, &Task1Handle, 0); // Run on Core 0
    // xTaskCreatePinnedToCore(routeDataTask, "RouteData", 4096, NULL, 1, &Task2Handle, 1); // Run on Core 1
    // xTaskCreatePinnedToCore(SendtoNodesTask, "ListenNodes", 4096, NULL, 1, &Task1Handle, 0); // Run on Core 0
    // xTaskCreatePinnedToCore(ListentoNodesTask, "RouteData", 4096, NULL, 1, &Task2Handle, 1); // Run on Core 1
}

void loop() {
    // Empty: Tasks handle execution.
}


void listenForNodesTask(void *pvParameters) {
    while (true) {

      String CH_number;
      uint8_t channel;

                
      if (lastNodeListened == 0) {
          channel = CH_B;  // CH
           CH_number = "CH_B";
          lastNodeListened = 1;
      } else {
          channel = CH_A;  // CH_A
           CH_number = "CH_A";
          lastNodeListened = 0;
      }
 

        
      ack = waitForAckExtender(channel);  
      if (ack) {
          Serial.println("received ack from " + CH_number);
          DataSend = CreateJson();
          WriteFromExtender(channel, DataSend.c_str());  
          Serial.println(CH_number + "sent JSON: \n" + DataSend);
      }


      vTaskDelay(10 / portTICK_PERIOD_MS);  // Prevent task starvation
    }
}




String CreateJson() {
    // Generate local JSON data
    StaticJsonDocument<200> localJson;
    localJson["deviceID"] = 4;  
    localJson["temperature"] = 25.4;  
    localJson["voltage"] = 3.7;  

    serializeJson(localJson, jsonData);
    return jsonData;

}





// Function to read from Serial


String ReadFromExtender(uint8_t channel) {
    String receivedData = "";
    SemaphoreHandle_t *semaphore;
    
    // Choose the correct channel and semaphore
    if (channel == CH_A) {
        semaphore = &CH_A_Semaphore;
    } else if (channel == CH_B) {
        semaphore = &CH_B_Semaphore;
    } 
    
    // Take the semaphore before accessing the extender
    if (xSemaphoreTake(*semaphore, portMAX_DELAY) == pdTRUE) {
        while (i2cuart.available(channel)) {
            char c = i2cuart.read(channel);
            
            if (c == '\n' || c == '\r') {
                
                break;  // Stop reading at newline or carriage return
            }
            
            receivedData += c;
            delay(2);
        }
        receivedData.trim(); // Remove unwanted spaces or newline chars
        
        // Release the semaphore after reading
        xSemaphoreGive(*semaphore);
    }
    else {
      Serial.println("semaphore is already taken, did not read");
    }
    
    return receivedData;
}





bool waitForAckExtender(uint8_t channel) {
    String CH_NUM;
    if (channel == CH_A) {
        CH_NUM = "CH_A";
    } else if (channel == CH_B) {
        CH_NUM = "CH_B";
    } 
    unsigned long startTime = millis();
    
    
    while (millis() - startTime < ACK_TIMEOUT) {

        Serial.println("Sent: PING to" + CH_NUM);
    
        WriteFromExtender(channel, "PING"); // Send "PING" through the extender
        delay(50);
        
        String receivedData = ReadFromExtender(channel);
        
        if (receivedData == "Available") {
            Serial.println("Responded: Available");
            return true;
        } else {
            Serial.println("Received Data: " + receivedData);
        }
    }
    
    Serial.println("Did not respond in time.");
    return false;
}


void encodeString(const char *input, uint8_t *output, uint8_t length) {
    for (int i = 0; i < length; i++) {
        output[i] = (uint8_t)input[i];  // Convert character to ASCII integer
    }
}

void WriteFromExtender(uint8_t channel, const char *input) {
    String CH_NUM;
    // if (channel == CH_A) {
    //     CH_NUM = "CH_A";
    // } else if (channel == CH_B) {
    //     CH_NUM = "CH_B";
    // } 

    // char h;

    uint8_t length = strlen(input);
    uint8_t encoded[length];  
    encodeString(input, encoded, length);
    
    for (int i = 0; i < length; i++) {
        // h = char(encoded[i]);
        // Serial.println("Sending " + String(h) + " to " + CH_NUM);
        i2cuart.write(channel, encoded[i]); // Send encoded bytes
    }
    i2cuart.write(channel, '\n');
}
