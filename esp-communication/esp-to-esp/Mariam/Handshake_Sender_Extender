#include <ArduinoJson.h>
#include <Wire.h>
#include "SC16IS752.h"

#define NODE_ID 2  // This node's ID
#define ACK_TIMEOUT 500  // Timeout for acknowledgment (ms)
#define CH_A SC16IS752_CHANNEL_A


SC16IS752 i2cuart = SC16IS752(SC16IS750_PROTOCOL_I2C,SC16IS750_ADDRESS_BB); 

// Task handles for managing FreeRTOS tasks
TaskHandle_t Task1Handle = NULL;
TaskHandle_t Task2Handle = NULL;

String CreateJson();
void encodeString(const char *input, uint8_t *output, uint8_t length);
void writeFromExtender(uint8_t channel, const char *input);
String ReadFromExtender(uint8_t channel);
bool waitForAckExtender(uint8_t channel);




bool ack;
String jsonData;
String DataSend;


// SC16IS752 Extender (Connected via I2C)


void setup() {
    Serial.begin(115200);
    i2cuart.begin(SC16IS752_DEFAULT_SPEED, SC16IS752_DEFAULT_SPEED); //baudrate setting
    if (i2cuart.ping()!=1) {
        Serial.println("Device not found");
        while(1);
    } else {
        Serial.println("Device found");
    }
    


    // Create FreeRTOS tasks
    xTaskCreatePinnedToCore(listenForNodesTask, "ListenNodes", 4096, NULL, 1, &Task1Handle, 0); // Run on Core 0
    // xTaskCreatePinnedToCore(routeDataTask, "RouteData", 4096, NULL, 1, &Task2Handle, 1); // Run on Core 1
}

void loop() {
    // Empty: Tasks handle execution.
}

void encodeString(const char *input, uint8_t *output, uint8_t length) {
    for (int i = 0; i < length; i++) {
        output[i] = (uint8_t)input[i];  // Convert character to ASCII integer
    }
}

void writeFromExtender(uint8_t channel, const char *input) {
    uint8_t length = strlen(input);
    uint8_t encoded[length];  
    encodeString(input, encoded, length);
    
    for (int i = 0; i < length; i++) {
        i2cuart.write(channel, encoded[i]); // Send encoded bytes
    }
}

void listenForNodesTask(void *pvParameters) {
    while (true) {

        ack = waitForAckExtender(CH_A);
        if (ack) {
            // Serial.println("JSON from Simulator");
            Serial.println("received ack");
            DataSend = CreateJson();
            writeFromExtender(CH_A, DataSend.c_str());
            Serial.println("sent JSON: \n" + DataSend);
        }

        vTaskDelay(10 / portTICK_PERIOD_MS); // Prevent task starvation
    }
}



String CreateJson() {
    // Generate local JSON data
    StaticJsonDocument<200> localJson;
    localJson["deviceID"] = 4;  
    localJson["temperature"] = 25.4;  
    localJson["voltage"] = 3.7;  

    serializeJson(localJson, jsonData);
    return jsonData;

}






// Function to read from Serial
String ReadFromExtender(uint8_t channel) {
    String receivedData = "";
    while (i2cuart.available(channel)) {
        char c = i2cuart.read(channel);
        
        if (c == '\n' || c == '\r') {
            break;  // Stop reading at newline or carriage return
        }
        
        receivedData += c;
        delay(2);
    }
    receivedData.trim(); // Remove unwanted spaces or newline chars
    return receivedData;
}



bool waitForAckExtender(uint8_t channel) {
    unsigned long startTime = millis();
    Serial.println("Sent: PING");
    
    while (millis() - startTime < ACK_TIMEOUT) {
        writeFromExtender(channel, "PING\n"); // Send "PING" through the extender
        delay(50);
        
        String receivedData = ReadFromExtender(channel);
        
        if (receivedData == "Available") {
            Serial.println("Responded: Available");
            return true;
        } else if (!receivedData.isEmpty()) {
            Serial.println("Received Data: " + receivedData);
        }
    }
    
    Serial.println("Did not respond in time.");
    return false;
}




